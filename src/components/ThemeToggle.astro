---
// ThemeToggle component for switching between light and dark modes
---

<button
  id="theme-toggle"
  class="theme-toggle-btn"
  aria-label="Toggle dark mode"
  title="Toggle dark mode"
>
  <svg class="sun-icon" viewBox="0 0 24 24" width="20" height="20">
    <circle cx="12" cy="12" r="5"/>
    <line x1="12" y1="1" x2="12" y2="3"/>
    <line x1="12" y1="21" x2="12" y2="23"/>
    <line x1="4.22" y1="4.22" x2="5.64" y2="5.64"/>
    <line x1="18.36" y1="18.36" x2="19.78" y2="19.78"/>
    <line x1="1" y1="12" x2="3" y2="12"/>
    <line x1="21" y1="12" x2="23" y2="12"/>
    <line x1="4.22" y1="19.78" x2="5.64" y2="18.36"/>
    <line x1="18.36" y1="5.64" x2="19.78" y2="4.22"/>
  </svg>
  <svg class="moon-icon" viewBox="0 0 24 24" width="20" height="20">
    <path d="M21 12.79A9 9 0 1 1 11.21 3 7 7 0 0 0 21 12.79z"/>
  </svg>
</button>

<style>
  .theme-toggle-btn {
    background: transparent;
    border: none;
    cursor: pointer;
    padding: 0.5rem;
    border-radius: 0.375rem;
    display: flex;
    align-items: center;
    justify-content: center;
    transition: background-color 0.2s ease;
    color: rgb(var(--black));
  }

  .theme-toggle-btn:hover {
    background-color: rgba(var(--gray-light), 0.5);
  }

  .sun-icon,
  .moon-icon {
    fill: none;
    stroke: currentColor;
    stroke-width: 2;
    stroke-linecap: round;
    stroke-linejoin: round;
    transition: opacity 0.2s ease, transform 0.2s ease;
  }

  .moon-icon {
    fill: currentColor;
    stroke: none;
  }

  /* Show sun icon in dark mode, moon icon in light mode */
  .sun-icon {
    opacity: 0;
    transform: rotate(90deg);
  }

  .moon-icon {
    opacity: 1;
    transform: rotate(0deg);
    position: absolute;
  }

  :global(.dark) .sun-icon {
    opacity: 1;
    transform: rotate(0deg);
  }

  :global(.dark) .moon-icon {
    opacity: 0;
    transform: rotate(-90deg);
  }

  :global(.dark) .theme-toggle-btn {
    color: rgb(var(--gray-light));
  }

  :global(.dark) .theme-toggle-btn:hover {
    background-color: rgba(var(--gray-dark), 0.5);
  }
</style>

<script>
  function initThemeToggle() {
    const themeToggle = document.getElementById('theme-toggle');
    
    function setTheme(theme) {
      if (theme === 'dark') {
        document.documentElement.classList.add('dark');
        localStorage.setItem('theme', 'dark');
      } else {
        document.documentElement.classList.remove('dark');
        localStorage.setItem('theme', 'light');
      }
    }

    function toggleTheme() {
      const isDark = document.documentElement.classList.contains('dark');
      setTheme(isDark ? 'light' : 'dark');
    }

    // Initialize theme on page load
    const savedTheme = localStorage.getItem('theme');
    const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
    
    if (savedTheme) {
      setTheme(savedTheme);
    } else if (prefersDark) {
      setTheme('dark');
    }

    // Add click event listener
    themeToggle?.addEventListener('click', toggleTheme);

    // Listen for system theme changes
    window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', (e) => {
      if (!localStorage.getItem('theme')) {
        setTheme(e.matches ? 'dark' : 'light');
      }
    });
  }

  // Initialize on page load
  initThemeToggle();

  // Re-initialize on navigation (for SPA-like behavior)
  document.addEventListener('astro:page-load', initThemeToggle);
</script>